// Function.recursive
fn fibonacci(i32 i) -> i32
{
    if(i==1) return 1;
    else if(i==2) return 1;
    else return fibonacci(i-1)+fibonacci(i-2);
}


// Basic.for
fn sum(i32 a) -> i32 
{
    i32 count=0;
    for(i32 i=0;i<a;i=i+1)
        count=count+i;
    return count;
}

// Basic.precedence
fn precedence()->i32{
    return 3*4+8*5+10;
}

// Class.memberFunction
class c
{
    i32 a;
    i32 b;
    fn add() -> i32
    {
        return a+b;
    }
}

class d
{
    c x;
    i32 y;
    fn func() -> i32
    {
        i32 tmp =x.add();
        return tmp*y;
    }
}

fn classMemberFunction(i32 a)->i32
{
    d v;
    v.x.a=a;
    v.x.b=10;
    v.y=2*v.x.add();
    return v.func();
}

//Array.basic
fn array(i32 a)->i32
{
    Arr<i32,10> array;
    for(i32 i=1;i<11;i=i+1){
        array[i-1]=a*i;
    }
    i32 sum=0;
    for(i32 j=0;j<10;j=j+1){
        sum += array[j];
    }
    return sum;
}

//Pointer.basic
external:
fn malloc(i32 a) -> __ptr<void>;

internal:
fn ptr(i32 a,i32 b)->i32{
    __ptr<c> p = c::new();
    p->a=a;
    p->b=b;
    return p->add();
}